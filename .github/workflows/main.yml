name: Generate Module Manifest

on:
  push:
    paths:
      - 'modules/**/*.py'
  workflow_dispatch:
    inputs:
      reason:
        description: '触发原因'
        required: false
        default: 'update for web'

permissions:
  contents: write

jobs:
  generate-manifest:
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ github.repository }}
      BRANCH: ${{ github.ref_name }}
      BASE_URL: "https://raw.githubusercontent.com"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Generate source.json
        run: |
          cat << "EOF" > generate_manifest.py
          import json
          import os
          import re
          from pathlib import Path
          from datetime import datetime
          
          MODULES_DIR = "modules"
          OUTPUT_FILE = "source.json"
          
          def extract_module_info(file_path):
              with open(file_path, 'r', encoding='utf-8') as f:
                  content = f.read()
              
              class_match = re.search(r'class\s+(\w+)\(BaseModule\):', content)
              if not class_match:
                  return None
              
              name_match = re.search(r'self\.name\s*=\s*[\'"](.+?)[\'"]', content)
              if not name_match:
                  return None
              
              version_match = re.search(r'self\.version\s*=\s*[\'"](.+?)[\'"]', content)
              version = version_match.group(1) if version_match else "1.0.0"
              
              return {
                  "class_name": class_match.group(1),
                  "name": name_match.group(1),
                  "version": version
              }
          
          def main():
              modules = []
              
              for py_file in Path(MODULES_DIR).glob('**/*.py'):
                  if not py_file.is_file():
                      continue
                  
                  module_id = py_file.stem.replace('_module', '')
                  
                  info = extract_module_info(py_file)
                  if not info:
                      continue
                  
                  file_path = py_file.relative_to(MODULES_DIR)
                  raw_url = f"{os.environ['BASE_URL']}/{os.environ['REPO_NAME']}/{os.environ['BRANCH']}/{MODULES_DIR}/{file_path}"
                  
                  modules.append({
                      "id": module_id,
                      "name": info['name'],
                      "version": info['version'],
                      "url": raw_url
                  })
              
              manifest = {
                  "name": "${{ vars.MODULE_NAME }}",
                  "id": "${{ vars.MODULE_ID }}",
                  "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                  "data": modules
              }
              
              with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
                  json.dump(manifest, f, indent=2, ensure_ascii=False)
              
              print(f"Generated {OUTPUT_FILE} with {len(modules)} modules")
          
          if __name__ == "__main__":
              main()
          EOF

          python generate_manifest.py

      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@example.com"
          git add source.json
          git diff --quiet && git diff --staged --quiet || git commit -m "Update source.json [auto]"
          git push
